using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace AOC21 {
    internal static class Program {
        private static void Main() {
            // var data = File.ReadAllLines(@"C:\temp\tmp.txt");
            var data = File.ReadAllLines(@"C:\temp\14.txt");
            var unused = new Day14(data);
        }
    }

    internal class Day14 {
        private string template = " ";
        private readonly Dictionary<string, string> _rules = new();
        private Dictionary<string, ulong> polyPairs = new();
        private Dictionary<string, ulong> polyElements = new();

        public Day14(string[] data) {
            template = data[0];
            SetRules(data);

            for (var i = 0; i < template.Length - 1; i++) {
                var tmpPair = template.Substring(i, 2);
                polyPairs.TryAdd(tmpPair, 0);
                polyPairs[tmpPair]++;

                polyElements.TryAdd(template[i].ToString(), 0);
                polyElements[template[i].ToString()]++;

                if (i != template.Length - 2) continue;
                polyElements.TryAdd(template[i + 1].ToString(), 0);
                polyElements[template[i + 1].ToString()]++;
            }

            for (var i = 0; i < 40; i++) {
                Solve();
            }

            SetTemplateCount();
        }

        private void Solve() {
            // Solve by:
            // https://www.reddit.com/r/adventofcode/comments/rfzq6f/comment/hokc9ma/?utm_source=share&utm_medium=web2x&context=3
            var iterationPairs = new Dictionary<string, ulong>();

            // Insight: 
            // The new pairs are generated by how many times "from" pairs occur. 
            // Keeping track of from pairs and the number of times they occur solves it.
            foreach (var pair in polyPairs.Keys) {
                var toInsert = _rules[pair];
                var count = polyPairs[pair];
                iterationPairs.TryAdd(pair[0] + toInsert, 0);
                iterationPairs[pair[0] + toInsert] += count;
                iterationPairs.TryAdd(toInsert + pair[1], 0);
                iterationPairs[toInsert + pair[1]] += count;

                polyElements.TryAdd(toInsert, 0);
                polyElements[toInsert] += count;
            }

            polyPairs = iterationPairs;
        }

        private void SetTemplateCount() {
            var max = ulong.MinValue;
            var min = ulong.MaxValue;

            foreach (var value in polyElements.Values) {
                if (value > max) {
                    max = value;
                }

                if (value < min) {
                    min = value;
                }
            }

            Console.WriteLine($"Max is {max}");
            Console.WriteLine($"Min is {min}");
            Console.WriteLine($"Max-min = {max - min}");
        }

        private void SetRules(string[] data) {
            for (var i = 2; i < data.Length; i++) {
                var tmp = data[i].Split(" ");
                _rules.Add(tmp[0], tmp[2]);
            }
        }
    }
}